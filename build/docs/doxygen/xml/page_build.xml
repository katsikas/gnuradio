<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.5.1">
  <compounddef id="page_build" kind="page">
    <compoundname>page_build</compoundname>
    <title>Build Instructions and Information</title>
    <detaileddescription>
<sect1 id="page_build_1dependencies">
<title>Dependencies</title>
<para>The list of GNU Radio dependencies and the minimum required versions, if any, to build the various GNU Radio components.</para><para>Most of these components do not need to be individually compiled or installed. Instead, rely on your operating system&apos;s package manager or binary installation process (the <bold>apt-get</bold> system in Debian and Ubuntu, <bold>yum</bold> in RedHat and Fedora, etc.). GNU Radio tries to keep an up-to-date build guide for the majority of the supported operating systems on gnuradio.org (<ulink url="http://gnuradio.org/redmine/projects/gnuradio/wiki/BuildGuide">http://gnuradio.org/redmine/projects/gnuradio/wiki/BuildGuide</ulink>).</para><para>Not all dependencies are required for all components, and not all components are required for a given installation. The list of required components is determined by what the user requires from GNU Radio. If, for example, you do not use any Comedi-based hardware, do not worry about building gr-comedi.</para><sect2 id="page_build_1dep_global">
<title>Global Dependencies</title>
<para><itemizedlist>
<listitem><para>git <ulink url="http://code.google.com/p/msysgit">http://code.google.com/p/msysgit</ulink> </para></listitem>
<listitem><para>cmake (&gt;= 2.6) <ulink url="http://www.cmake.org/cmake/resources/software.html">http://www.cmake.org/cmake/resources/software.html</ulink> </para></listitem>
<listitem><para>boost (&gt;= 1.35) <ulink url="http://www.boostpro.com/download">http://www.boostpro.com/download</ulink> </para></listitem>
<listitem><para>cppunit (&gt;= 1.9.14) <ulink url="http://gaiacrtn.free.fr/cppunit/index.html">http://gaiacrtn.free.fr/cppunit/index.html</ulink> </para></listitem>
<listitem><para>fftw3f (&gt;= 3.0) <ulink url="http://www.fftw.org/install/windows.html">http://www.fftw.org/install/windows.html</ulink> </para></listitem>
<listitem><para>gsl (&gt;= 1.10) <ulink url="http://gnuwin32.sourceforge.net/packages/gsl.htm">http://gnuwin32.sourceforge.net/packages/gsl.htm</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_python">
<title>Python Wrappers</title>
<para><itemizedlist>
<listitem><para>python (&gt;= 2.5) <ulink url="http://www.python.org/download/">http://www.python.org/download/</ulink> </para></listitem>
<listitem><para>swig (&gt;= 1.3.31) <ulink url="http://www.swig.org/download.html">http://www.swig.org/download.html</ulink> </para></listitem>
<listitem><para>numpy (&gt;= 1.1.0) <ulink url="http://sourceforge.net/projects/numpy/files/NumPy/">http://sourceforge.net/projects/numpy/files/NumPy/</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_docs">
<title>docs: Building the documentation</title>
<para><itemizedlist>
<listitem><para>doxygen (&gt;= 1.5) <ulink url="http://www.stack.nl/~dimitri/doxygen/download.html">http://www.stack.nl/~dimitri/doxygen/download.html</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_grc">
<title>grc: The GNU Radio Companion</title>
<para><itemizedlist>
<listitem><para>Cheetah (&gt;= 2.0) <ulink url="http://www.cheetahtemplate.org/">http://www.cheetahtemplate.org/</ulink> </para></listitem>
<listitem><para>pygtk (&gt;= 2.10) <ulink url="http://www.pygtk.org/downloads.html">http://www.pygtk.org/downloads.html</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_gr_qtgui">
<title>gr-qtgui: The QT-based Graphical User Interface</title>
<para><itemizedlist>
<listitem><para>qt (&gt;= 4.4) <ulink url="http://qt.nokia.com/downloads/">http://qt.nokia.com/downloads/</ulink> </para></listitem>
<listitem><para>qwt (&gt;= 5.2) <ulink url="http://sourceforge.net/projects/qwt/">http://sourceforge.net/projects/qwt/</ulink> </para></listitem>
<listitem><para>pyqt (&gt;= 4.4) <ulink url="http://www.riverbankcomputing.co.uk/software/pyqt/download">http://www.riverbankcomputing.co.uk/software/pyqt/download</ulink> </para></listitem>
<listitem><para>pyqwt (&gt;= 5.2) <ulink url="http://pyqwt.sourceforge.net/download.html">http://pyqwt.sourceforge.net/download.html</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_gr_wxgui">
<title>gr-wxgui: The WX-based Graphical User Interface</title>
<para><itemizedlist>
<listitem><para>wxpython (&gt;= 2.8) <ulink url="http://www.wxpython.org/">http://www.wxpython.org/</ulink> </para></listitem>
<listitem><para>python-lxml (&gt;= 1.3.6) <ulink url="http://lxml.de/">http://lxml.de/</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_gr_audio">
<title>gr-audio: Audio Subsystems (system/OS dependent)</title>
<para><itemizedlist>
<listitem><para>audio-alsa (&gt;= 0.9) <ulink url="http://www.alsa-project.org">http://www.alsa-project.org</ulink> </para></listitem>
<listitem><para>audio-jack (&gt;= 0.8) <ulink url="http://jackaudio.org/">http://jackaudio.org/</ulink> </para></listitem>
<listitem><para>portaduio (&gt;= 19) <ulink url="http://www.portaudio.com/">http://www.portaudio.com/</ulink> </para></listitem>
<listitem><para>audio-oss (&gt;= 1.0) <ulink url="http://www.opensound.com/oss.html">http://www.opensound.com/oss.html</ulink> </para></listitem>
<listitem><para>audio-osx </para></listitem>
<listitem><para>audio-windows</para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_uhd">
<title>uhd: The Ettus USRP Hardware Driver Interface</title>
<para><itemizedlist>
<listitem><para>uhd (&gt;= 3.0.0) <ulink url="http://code.ettus.com/redmine/ettus/projects/uhd/wiki">http://code.ettus.com/redmine/ettus/projects/uhd/wiki</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_shd">
<title>shd: The Symplex Hardware Driver Interface</title>
<para><itemizedlist>
<listitem><para>shd (&gt;= 3.0.0)</para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_gr_video_sdl">
<title>gr-video-sdl: PAL and NTSC display</title>
<para><itemizedlist>
<listitem><para>SDL (&gt;= 1.2.0) <ulink url="http://www.libsdl.org/download-1.2.php">http://www.libsdl.org/download-1.2.php</ulink></para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="page_build_1dep_gr_comedi">
<title>gr-comedi: Comedi hardware interface</title>
<para><itemizedlist>
<listitem><para>comedilib (&gt;= 0.8) <ulink url="http://www.comedi.org/">http://www.comedi.org/</ulink></para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="page_build_1build_gr_cmake">
<title>Building GNU Radio</title>
<para>GNU Radio is built using the Cmake build system (<ulink url="http://www.cmake.org/">http://www.cmake.org/</ulink>). The standard build method is as follows:</para><para><programlisting><codeline><highlight class="normal">$<sp/>mkdir<sp/>$(builddir)</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>$(builddir)</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cmake<sp/>[OPTIONS]<sp/>$(srcdir)</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>test</highlight></codeline>
<codeline><highlight class="normal">$<sp/>sudo<sp/>make<sp/>install</highlight></codeline>
</programlisting></para><para>The $(builddir) is the directory in which the code is built. This <bold>cannot</bold> be the same path as where the source code resides. Often, $(builddir) is $(srcdir)/build.</para><sect2 id="page_build_1Cmake">
<title>Options</title>
<para>Options can be used to specify where to find various library or include file dependencies that are not automatically being found (-DCMAKE_PREFIX_PATH) or set the prefix (-DCMAKE_INSTALL_PREFIX=(dir)).</para><para>Components can also be enabled and disabled through the options. For a component named *gr-comp*, the option to disable would look like: -DENABLE_GR_COMP=off. The &quot;off&quot; could also be &quot;false&quot; or &quot;no&quot;, and cmake is not case sensitive about these options. Similarly, &quot;true&quot;, &quot;on&quot;, or &quot;yes&quot; will turn this component on. All components are enabled by default.</para><para>An example is -DENABLE_PYTHON=False turns off building any Python or Swigging components. The result will be the GNU Radio libraries and C++ programs/applications/examples. No Python or GRC files will be built or installed.</para><para>The -DENABLE_DEFAULT=False can be used to disable all components. Individual components can then be selectively turned back on. For example, just buidling the Volk and Gruel libraries can be done with this:</para><para><programlisting><codeline><highlight class="normal">cmake<sp/>-DENABLE_DEFAULT=Off<sp/>-DENABLE_VOLK=True<sp/>-DENABLE_GRUEL=True<sp/>&lt;srcdir&gt;</highlight></codeline>
</programlisting></para><para>The build type allows you to specify the build as a debug or release version. Each type sets different flags for different purposes. To set the build type, use:</para><para><programlisting><codeline><highlight class="normal">-DCMAKE_BUILD_TYPE=</highlight><highlight class="stringliteral">&quot;Release&quot;</highlight><highlight class="normal">|</highlight><highlight class="stringliteral">&quot;Debug&quot;</highlight></codeline>
</programlisting></para><para>If not specified, the &quot;Release&quot; mode is the defaulted to.</para><para>&quot;Release&quot; mode sets the &apos;-O3&apos; optimization flag.</para><para>&quot;Debug&quot; mode sets &apos;-g -O2&apos; flags to export debug symbols and reduce the optimization to make the libraries easier to debug and step through.</para></sect2>
<sect2 id="page_build_1build_gr_cmake_e100">
<title>Building for the E100</title>
<para>To build GNU Radio on the Ettus Research E100 embedded platforms, Cmake has to know that the processors uses the NEON extensions. Use the</para><para><programlisting><codeline><highlight class="normal">cmake<sp/>-DCMAKE_CXX_FLAGS:STRING=</highlight><highlight class="stringliteral">&quot;-mcpu=cortex-a8<sp/>-mfpu=neon<sp/>-mfloat-abi=softfp<sp/>-g&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_C_FLAGS:STRING=</highlight><highlight class="stringliteral">&quot;-mcpu=cortex-a8<sp/>-mfpu=neon<sp/>-mfloat-abi=softfp<sp/>-g&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;gr_source_dir&gt;</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="page_build_1build_old_autotools">
<title>Building Using Old Autotools Method</title>
<para>As of version 3.5, we have moved to using Cmake as the default, preferred build system. If for some reason, Cmake fails on your system, GNU Radio still includes the old autotools build process as a parallel build method. To build:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>$(srcdir)</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./bootstrap<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>if<sp/>not<sp/>building<sp/>from<sp/>a<sp/>tarball</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>$(builddir)</highlight></codeline>
<codeline><highlight class="normal">$<sp/>$(srcdir)/configure<sp/>[options]</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>[-jN]</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>check</highlight></codeline>
<codeline><highlight class="normal">$<sp/>sudo<sp/>make<sp/>install</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
